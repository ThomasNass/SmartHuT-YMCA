{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-4189da18df9851bf.js","node_modules/@microsoft/signalr/dist/browser/signalr.js","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/webpack/universalModuleDefinition","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/webpack/bootstrap","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/webpack/runtime/define property getters","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/webpack/runtime/global","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/webpack/runtime/hasOwnProperty shorthand","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/webpack/runtime/make namespace object","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/Errors.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/HttpClient.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/ILogger.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/Loggers.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/Utils.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/FetchHttpClient.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/XhrHttpClient.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/DefaultHttpClient.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/TextMessageFormat.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/HandshakeProtocol.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/IHubProtocol.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/Subject.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/HubConnection.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/DefaultReconnectPolicy.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/HeaderNames.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/ITransport.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/AbortController.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/LongPollingTransport.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/ServerSentEventsTransport.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/WebSocketTransport.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/HttpConnection.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/JsonHubProtocol.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/HubConnectionBuilder.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/index.ts","node_modules/@microsoft/signalr/dist/browser/webpack:/signalR/src/browser-index.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"1dbf7e3ca28c48d1\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // Web extension context\n\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n\n  var supportsSourceURL = false;\n\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  } // $FlowFixMe\n\n\n  ws.onmessage = async function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update\n\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n\n        await hmrApplyUpdates(assets);\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else fullReload();\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n\n      return new Promise((resolve, reject) => {\n        var _document$head;\n\n        script.onload = () => resolve(script);\n\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\n\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      } // $FlowFixMe\n\n\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push(...p);\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}",null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"signalR\"] = factory();\n\telse\n\t\troot[\"signalR\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message: string) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occured. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    // react-native has a window but no document\r\n    static get isReactNative(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker && !this.isReactNative;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    let headers: {[k: string]: string} = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis(): unknown {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        } else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content!,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\") as string;\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: ((...args: any[]) => void)[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport abstract class HeaderNames {\r\n    static readonly Authorization = \"Authorization\";\r\n    static readonly Cookie = \"Cookie\";\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _getAccessToken(): Promise<string | null> {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent!)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    } else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Everything that users need to access must be exported here. Including interfaces.\r\nexport { AbortSignal } from \"./AbortController\";\r\nexport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nexport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nexport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nexport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nexport { HubConnection, HubConnectionState } from \"./HubConnection\";\r\nexport { HubConnectionBuilder } from \"./HubConnectionBuilder\";\r\nexport { MessageType, MessageHeaders, HubMessage, HubMessageBase, HubInvocationMessage, InvocationMessage, StreamInvocationMessage, StreamItemMessage, CompletionMessage,\r\n    PingMessage, CloseMessage, CancelInvocationMessage, IHubProtocol } from \"./IHubProtocol\";\r\nexport { ILogger, LogLevel } from \"./ILogger\";\r\nexport { HttpTransportType, TransferFormat, ITransport } from \"./ITransport\";\r\nexport { IStreamSubscriber, IStreamResult, ISubscription } from \"./Stream\";\r\nexport { NullLogger } from \"./Loggers\";\r\nexport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nexport { Subject } from \"./Subject\";\r\nexport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\nexport { VERSION } from \"./Utils\";\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\r\n\r\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\r\n// that exist on Uint8Array with the same name, and JavaScript is magic.\r\n// We make them 'writable' because the Buffer polyfill messes with it as well.\r\nif (!Uint8Array.prototype.indexOf) {\r\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\r\n        value: Array.prototype.indexOf,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.slice) {\r\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n        // wrap the slice in Uint8Array so it looks like a Uint8Array.slice call\r\n        // eslint-disable-next-line object-shorthand\r\n        value: function(start?: number, end?: number) { return new Uint8Array(Array.prototype.slice.call(this, start, end)); },\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.forEach) {\r\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\r\n        value: Array.prototype.forEach,\r\n        writable: true,\r\n    });\r\n}\r\n\r\nexport * from \"./index\";\r\n"],"names":[],"version":3,"file":"index.a28c48d1.js.map","sourceRoot":"../../YMCA-frontend/"}